# -*- coding: utf-8 -*-
"""producer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fXirrJbXZy5tjeBVmp2bbERGBOGSWQm7
"""

import pandas as pd
import random
import json
import time
from datetime import datetime, timedelta
from kafka import KafkaProducer

# --------------------------------------------
# Kafka Setup
# --------------------------------------------

producer = KafkaProducer(
    bootstrap_servers='localhost:9092',  # Change this if using a remote broker
    value_serializer=lambda v: json.dumps(v).encode('utf-8')
)

TOPIC_NAME = 'smart_home_stream'  # Define your Kafka topic name

# --------------------------------------------
# Generate Smart Home Data Row-by-Row
# --------------------------------------------

devices = ['door', 'light', 'plug', 'camera']

device_power_profile = {
    'door': (5, 1),
    'light': (60, 10),
    'plug': (500, 300),
    'camera': (10, 2)
}

device_on_probability = {
    'door': 0.10,
    'light': 0.30,
    'plug': 0.40,
    'camera': 0.80
}

n_rows = 24 * 60 * 60  # One full day, second-by-second
start_time = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

print("Starting Kafka Producer...")

for i in range(n_rows):
    timestamp = (start_time + timedelta(seconds=i)).strftime('%Y-%m-%d %H:%M:%S')
    device = random.choice(devices)
    on_prob = device_on_probability[device]
    device_status = 1 if random.random() < on_prob else 0

    if device_status == 1:
        mean_power, std_dev_power = device_power_profile[device]
        power_usage = max(0, round(random.gauss(mean_power, std_dev_power), 2))
        device_reading = round(random.gauss(50, 5), 2)
    else:
        power_usage = 0
        device_reading = 0

    message = {
        "Timestamp": timestamp,
        "Device": device,
        "Power Usage": power_usage,
        "Device Reading": device_reading,
        "Device Status": device_status
    }

    # Send message to Kafka
    producer.send(TOPIC_NAME, value=message)
    print(f"ðŸš€ Sent: {message}")

    time.sleep(0.05)  # Simulate ~20x faster than real-time (1s = 1 day in ~72 mins)

print("Finished sending all smart home data.")